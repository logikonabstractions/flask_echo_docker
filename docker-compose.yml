# to build:
# ``docker-compose build`` : this will build the images, but NOT start any container
# ``docker-compose up``: starts the container AND build the image if needed (e.g. if there isn't already a built image corresponding to the dockerfiles content)

version: '3.8'

x-common-variables: &shared_envvars
  FLASK_ENV: development
  FLASK_APP: main.py
  FLASK_RUN_HOST: 0.0.0.0
  COMPOSE_PROJECT_NAME: DOCKER_ECHOES

x-volumes: &com_volumes
  - .:/project          # maps the current directory, e.g. project root that is gitted, to /proj in the container so we can live-reload

services:
  python_workbook:
    build:
      dockerfile: Dockerfile
      context: ./python_workbook
    # volumes: *com_volumes
    ports:
      - 5000:5000
    environment:
      <<: *shared_envvars   # DRY: defined common stuff in a shared section above, & use YAML merge language syntaxe to include that k-v mapping here. pretty neat.
      FLASK_NAME: PYTHON_WORKBOOK
  react_client:
    build:
      dockerfile: Dockerfile
      context: ./react_client
    depends_on: 
      - python_workbook
